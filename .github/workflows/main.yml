name: Deploy Gemini Backend to Lambda

on:
  push:
    branches:
      - main # Or the branch you want to trigger the deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      # - name: Updating and Upgrading packages
      #   run: |
      #     sudo apt update -y && sudo apt upgrade -y

      # - name: Installing Yarn
      #   run: npm install --global yarn

      # - name: Install dependencies
      #   run: yarn install

      - name: Zip Code for Lambda
        run: zip -r function.zip .

      - name: Update Lambda Environment variables
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws lambda update-function-configuration \
            --function-name express \
            --environment "Variables={ \
            IMAGE_KIT_ENDPOINT_URL=${{ secrets.IMAGE_KIT_ENDPOINT_URL }}, \
            IMAGE_KIT_PUBLIC_KEY=${{ secrets.IMAGE_KIT_PUBLIC_KEY }}, \
            IMAGE_KIT_PRIVATE_KEY=${{ secrets.IMAGE_KIT_PRIVATE_KEY }}, \
            REACT_CLIENT_URL=${{ secrets.REACT_CLIENT_URL }}, \
            ENVIRONMENT=${{ secrets.ENVIRONMENT }}, \
            MONGODB_URL=${{secrets.MONGODB_URL}}, \
            CLERK_PUBLISHABLE_KEY=${{secrets.CLERK_PUBLISHABLE_KEY}}, \
            CLERK_SECRET_KEY=${{secrets.CLERK_SECRET_KEY}}
            }"

      - name: Wait for 5 seconds for Lambda to update
        run: sleep 5

      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code --function-name express --zip-file fileb://function.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  update-layer:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install Dependencies for Layer
        run: |
          mkdir nodejs
          npm install --only=prod
          mv node_modules nodejs/
          zip -r layer.zip nodejs

      - name: Deploy Lambda Layer
        run: |
          aws lambda publish-layer-version --layer-name my_layer --zip-file fileb://layer.zip > /dev/null 2>&1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # - name: Deploy Lambda Layer
      #   uses: aws-actions/aws-cli-action@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: your-aws-region # e.g., us-east-1
      #     command: |
      #       aws lambda publish-layer-version --layer-name my_layer --zip-file fileb://layer.zip
      - name: Update Lambda Layer
        run: |
          LAYER_ARN=$(aws lambda list-layer-versions --layer-name my_layer --query 'LayerVersions[0].LayerVersionArn' --output text)
          aws lambda update-function-configuration --function-name express --layers $LAYER_ARN > /dev/null 2>&1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # - name: Update Lambda to Use Layer
      #   uses: aws-actions/aws-cli-action@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }} # e.g., us-east-1
      #     command: |
      #       LAYER_ARN=$(aws lambda list-layer-versions --layer-name my_layer --query 'LayerVersions[0].LayerVersionArn' --output text)
      #       aws lambda update-function-configuration --function-name express --layers $LAYER_ARN
      # Just adding the comment to the workflow
